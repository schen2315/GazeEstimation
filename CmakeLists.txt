CMAKE_MINIMUM_REQUIRED(VERSION 3.0 FATAL_ERROR)
cmake_policy(VERSION 3.0)
PROJECT(EyeTracking)
#make sure we only build release
SET(CMAKE_CONFIGURATION_TYPES Debug Release CACHE STRING "" FORCE)
#set opencv directory var
#SET(OPENCV_DIR "/usr/local/include/opencv2")

SET(COMPILE_FLAGS "-std=c++11 -ferror-limit=100")
SET(CMAKE_CXX_FLAGS  "${CMAKE_CXX_FLAGS} ${COMPILE_FLAGS}" )
SET(CMAKE_EXE_LINKER_FLAGS  "${CMAKE_EXE_LINKER_FLAGS} ${COMPILE_FLAGS}")
#boost options
SET(Boost_USE_STATIC_LIBS ON)
SET(Boost_USE_MULTITHREADED ON)
SET(Boost_USE_STATIC_RUNTIME OFF)
#boost directories

#SET(BOOST_ROOT "/usr/local/Cellar/boost/1.61.0_1")
#SET (BOOST_INCLUDEDIR "${BOOST_ROOT}/include/boost")
#SET(BOOST_LIBRARYDIR "${BOOST_ROOT}/lib")

FIND_PACKAGE(Boost 1.60.0 COMPONENTS regex date_time system chrono thread serialization filesystem REQUIRED)
FIND_PACKAGE(OpenCV REQUIRED)
#ADD_DEFINITIONS(-D_WIN32_WINNT=0x0501)

SET(SOURCE_DIR "source")
SET(INCLUDE_DIR "include")

INCLUDE_DIRECTORIES(include ${Boost_INCLUDE_DIRS} ${OPENCV_DIR}/include)
#include opencv lib directory
LINK_DIRECTORIES(${OPENCV_DIR})

FILE(GLOB SOURCE_FILES ${SOURCE_DIR}/*.cpp)
FILE(GLOB HEADER_FILES ${INCLUDE_DIR}/*.h)

#header filters
#SOURCE_GROUP("Header Files" FILES ${HEADER_FILES})
#source filters
#SOURCE_GROUP("Source Files" FILES ${SOURCE_FILES})

#create exe
ADD_EXECUTABLE(EyeTracking ${SOURCE_FILES} ${HEADER_FILES})
#link libs
TARGET_LINK_LIBRARIES(EyeTracking ${Boost_LIBRARIES} ${OpenCV_LIBS})
#$(OPENCV_LIBRARIES)
#opencv mac executable

#ADD_DEFINITIONS( -std=c++11 )

ADD_DEFINITIONS(-stdlib=libc++) 